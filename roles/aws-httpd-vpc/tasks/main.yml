---
# tasks file for aws-httpd-vpc
- name: Get my current IP address
  uri:
    url: http://checkip.amazonaws.com/
    return_content: yes
  register: my_ip

- debug:
    var: my_ip
- pip:
    name: boto
- pip:
    name: boto3

- name: create VPC
  ec2_vpc_net:
     name: "{{ vpc_name }}"
     cidr_block: "{{ vpc_cidr }}"
     region: "{{ region }}"
     state: present
  register: vpc

- debug: 
    var: vpc

- name: Set VPC ID in variable
  set_fact:
    vpc_id: "{{ vpc.vpc.id }}"

  register: vpcid

- debug: 
    var: vpcid


- name: associate subnet to the VPC
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    cidr: "{{ subnet_cidr }}"
    map_public: yes
    resource_tags:
      Name: "{{ subnet_name }}"
  register: subnet

- debug: 
    var: subnet

- name: create IGW
  ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    state: "present"
    tags:
      Name: "{{ igw_name }}"
  register: igw


- name: Route IGW
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id  }}"
    tags:
      Name: "{{ route_name }}"
  register: rigw

- debug: 
    var: rigw

- name: Create Security Group
  ec2_group:
    name: Web DMZ
    description: DMZ Security Group
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        ports:
        - 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0
  register: security_group

- debug: 
    var: security_group


- name: Create simple security group
  ec2_group:
    name: "{{ securitygroup_name }}"
    description: A security group for my current IP
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
    rules_egress:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
  register: webserversgroup1

- debug:
    var: webserversgroup1

- name: Create the ELB only listening over port 80
  ec2_elb_lb:
    name: "{{ application }}-load-balancer"
    region: "{{ region }}"
    state: present
    zones:
      - "{{ region }}a"
      - "{{ region }}b"
      - "{{ region }}c"
      - "{{ region }}d"
      - "{{ region }}e"
      - "{{ region }}f"
    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
  register: elb

- debug: 
    var: elb

- name: create a new ec2 key pair, returns generated private key
  ec2_key:
    name: "{{ keypair_name }}"
    region: "{{ region }}"
  register: keypair
  tags:
    - ec2_key

- debug:
    var: keypair
  tags:
    - ec2_key


- name: Copy EC2 Key Pair private key locally
  copy: content="{{ keypair.key.private_key }}" dest={{ ec2_key_directory_ansible }}ec2_key_pair.ppk owner="{{ keyowner }}" group="{{ keyowner }}" mode=0400
  when: keypair.changed == true
  tags:
    - ec2_key


- name: Copy EC2 Key Pair private key locally
  copy: content="{{ keypair.key.private_key }}" dest={{ ec2_key_directory_ansible }}ec2_key_pair.pem owner="{{ keyowner }}" group="{{ keyowner }}" mode=0400
  when: keypair.changed == true
  tags:
    - ec2_key

- name: Copy EC2 Key Pair private key locally
  copy: content="{{ keypair.key.private_key }}" dest="{{ ec2_key_directory_ansible }}ec2_key_pair.ppk" owner="{{ keyowner }}" group="{{ keyowner }}" mode=0400
  when: keypair.changed == true
  tags:
    - ec2_key


- name: Copy EC2 Key Pair private key locally
  copy: content="{{ keypair.key.private_key }}" dest="{{ ec2_key_directory_ansible }}ec2_key_pair.pem" owner="{{ keyowner }}" group="{{ keyowner }}" mode=0400
  when: keypair.changed == true
  tags:
    - ec2_key

- name: Create EC2 instances
  ec2:
    key_name: "{{ keypair_name }}"
    image: "{{ verg }}"
    wait: yes
    instance_type: t2.micro
    region: "{{ region }}"
    group_id: "{{ security_group.group_id }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    instance_tags:
      application: "{{ application }}"
    exact_count: "{{ machine_counts }}"
    count_tag:
      application: "{{ application }}"
  register: ec2_instances1

- debug:
    var: ec2_instances1

- name: Store EC2 instance IPs to provision against
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: ec2_instance_ips
  with_items: "{{ ec2_instances1.tagged_instances }}"

- name: Wait for servers to come online
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    timeout: 360
  with_items: "{{ ec2_instances1.tagged_instances }}"

- name: Add EC2 instances as known hosts
  known_hosts:
    name: "{{ item.public_ip }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
  with_items: "{{ ec2_instances1.tagged_instances }}"




- name: Create EC2 instances
  ec2:
    key_name: "{{ keypair_name }}"
    image: "{{ verg }}"
    wait: yes
    instance_type: t2.micro
    region: "{{ region }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    group_id:
      - "{{ webserversgroup1.group_id }}"
      - "{{ elb.elb.security_group_ids | first }}"
    instance_tags:
      application: "{{ application }}"
    exact_count: "{{ machine_counts }}"
    count_tag:
      application: "{{ application }}"
  register: ec2_instances

- debug:
    var: ec2_instances



- name: Store EC2 instance IPs to provision against
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: ec2_instance_ips
  with_items: "{{ ec2_instances.tagged_instances }}"

- name: Wait for servers to come online
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    timeout: 360
  with_items: "{{ ec2_instances.tagged_instances }}"

- name: Add EC2 instances as known hosts
  known_hosts:
    name: "{{ item.public_ip }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
  with_items: "{{ ec2_instances.tagged_instances }}"

